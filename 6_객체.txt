- 프로그래밍 관점 : 객체 지향 vs 절차 지향

객체[Object]
    - 주체(subject) : '나' 라는 실체, 중심 
    - 객체(object) : 주체(나)가 아닌 다른 실체(타인)
    - 객체지향 프로그래밍
        - 객체를 중심으로 하는 프로그래밍 패러다임
        - 주체(나/개발자/실체)<-------------->컴퓨터(실체들)
            즉] 내(개발자/주체)가 컴퓨터에서 실체물을 만들어내면 만들어진 것들은 모두 객체
        - 생활 속 객체
            - 안경, 의자, 컴퓨터, CPU, 강의실(공간), 책, 공기, 눈, 종이
            - 사람(객체) : 기준(!!) 장민우(주체) ---> 이민수(객체)
                        - 장민우 기준으로는 장민우는 주체가 되고 장민우가 바라보는 이민수형은 객체가 된다
            - 컴퓨터 속 객체
                - 고유한 속성 또는 행동 가진다.
                - 물리적이 존재하거나 논리(추상)적으로 존재하는 것들
                - 인기가 많은 이유 : 세상에 모든 것들을 (성질/행동)을 디지털화 할 수 있다.
                - 객체지향 프로그래밍 언어 : JS, JAVA, PYTHON, C# 등등

    1. JS 객체 : 1. 클래스가 기반의(class-object)객체 2. 클래스가 없는 (claass-free object)객체
        즉] JS는 클래스(설계도) 있어도 없어도 객체 생성이 가능하다.

    2. JS 객체 형태 : { 속성명 : 값, 속성명 : 값, 속성명 : 값 }
        - { } 중괄호를 이용한 { } 1개 하나의 객체로 취급하고 각 속성들은 ,(쉼표)로 구분한다.
        - 속성 : 객체가 갖는 고유한 성질, 데이터/값, 예] 이름, 나이, 키/제목, 내용, 조회수 등등
            - 속성명에는 변수명과 같이 상징적인 이름 역할
            - 속성명과 매칭하여 데이터/값, 함수, 배열, 객체 모두 대입이 가능하다.
            - 속성명과 속성의 값을 한 쌍으로 구성, :(콜론)으로 구성
    3. JS 선언         
        1. let/const
        2. 변수명
        3. =
        4. { }

    4. JS 객체 호출
        - 객체{}를 갖는 변수를 호출한다.
        - 변수명 
    
    5. 변수와 객체와 객체속성 관계
        - { } : 자료의 타입으로 구성된 데이터(객체) 1개
        - [요소1, 요소2, 요소3] : 배열 1개(데이터 3개)
        - let 변수 = { } : 변수가 데이터(객체) 1개를 참조한다.
        - let 변수 - { 속성명 : 데이터 , 속성명 : 데이터 } 
            : 변수가 데이터(객체) 1개를 참조하고 객체가 각 속성들을 참조한다.
            변수명 --참조--> 객체 --참조--> 각 속성
            예] 사람 --참조--> 책가방 --참조-->각 속성(지갑/ 파우치/ 핸드폰--->어플)
    
    6. 객체가 속성들을 참조하는 방법
        - .(점) : 접근연산자로써 객체 내 속성에 접근/호출할때 사용되는 연산자/특수문자
        - 객체.속성명, 변수명.속성명
            참고] 변수의 값 호출하는 법 : let 변수명 = 10; 변수명;
                - 배열 (정의) : let 변수명 = [ ] (호출) 변수명;
                - 객체 (정의) : let 변수명 = { } (호출) 변수명;
            - 함수의 호출하는법 : (정의) function 함수명(){}; (호출) 함수명();

    7. 객체 내 속성을 다루는 방법
        1. 객체 내 속성값 호출
            변수명.속성명
        2. 객체 내 속성 생성
            변수명.새로운속성명 = 새로운 데이터
        3. 객체 내 속성값 수정
            변수명.기존속성명 = 새로운데이터
        4. 객체 내 속성값 삭제
            delete 변수명.속성명;

    8. 객체 내 속성이 가질 수 있는 타입 [모두]
        let 변수명 = {
            속성명 : 리터럴(문자열,숫자,불리언 등),
            속성명 : [ ], 
            속성명 : function(){}, 
            속성명 : { }
        }
        즉] 객체 내 모든 타입의 데이터들을 가질 수 있다.

    9.  
